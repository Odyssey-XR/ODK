//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Plugins/ODK/Prefabs/Player/Input/TrackedDeviceTransformInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TrackedDeviceTransformInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TrackedDeviceTransformInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TrackedDeviceTransformInput"",
    ""maps"": [
        {
            ""name"": ""LeftController"",
            ""id"": ""54f02707-cd4d-4d2d-b70c-cf42a92d1a7c"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""ceccacee-93c5-4016-9a68-b6e2b8081d62"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""da0c6896-9f4f-47c1-9ba8-b2c9aed84069"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b637bdec-d731-4bd9-88ff-76dca348987d"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dd39c7c-3303-4512-9a2a-866b66d076cb"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightController"",
            ""id"": ""6c6e0df7-a3e1-49c2-971f-229d3fbb2f54"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""bea36c64-c3a4-4ebe-a6ab-e2ca8f6bb256"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""26a4eb37-4ca0-447b-b81b-9c36566929b0"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25182c9c-c39c-4264-90aa-270c5cffc403"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07dd5438-405e-455b-acec-d3753c527502"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HMD"",
            ""id"": ""ea77fdcb-6374-4f0d-ad38-8b9268197bd1"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""548b24f6-c339-4eab-aa99-05fd21497af7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""23ba1f05-13c7-41ad-98f1-d3c3b95a55be"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""20f915b4-b8ec-45d3-a5a2-f0bd68fcad72"",
                    ""path"": ""<OpenXRHmd>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44c0ce7c-f071-48e0-900e-336036ed2dc8"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88495f0c-b675-46d1-9d9d-486865fa5ef1"",
                    ""path"": ""<OculusHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a0d5d5c-1838-414a-9c90-962565167ca3"",
                    ""path"": ""<OpenXRHmd>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""TrackedDeviceInputScheme"",
            ""bindingGroup"": ""TrackedDeviceInputScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LeftController
        m_LeftController = asset.FindActionMap("LeftController", throwIfNotFound: true);
        m_LeftController_Position = m_LeftController.FindAction("Position", throwIfNotFound: true);
        m_LeftController_Rotation = m_LeftController.FindAction("Rotation", throwIfNotFound: true);
        // RightController
        m_RightController = asset.FindActionMap("RightController", throwIfNotFound: true);
        m_RightController_Position = m_RightController.FindAction("Position", throwIfNotFound: true);
        m_RightController_Rotation = m_RightController.FindAction("Rotation", throwIfNotFound: true);
        // HMD
        m_HMD = asset.FindActionMap("HMD", throwIfNotFound: true);
        m_HMD_Position = m_HMD.FindAction("Position", throwIfNotFound: true);
        m_HMD_Rotation = m_HMD.FindAction("Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftController
    private readonly InputActionMap m_LeftController;
    private List<ILeftControllerActions> m_LeftControllerActionsCallbackInterfaces = new List<ILeftControllerActions>();
    private readonly InputAction m_LeftController_Position;
    private readonly InputAction m_LeftController_Rotation;
    public struct LeftControllerActions
    {
        private @TrackedDeviceTransformInput m_Wrapper;
        public LeftControllerActions(@TrackedDeviceTransformInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_LeftController_Position;
        public InputAction @Rotation => m_Wrapper.m_LeftController_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_LeftController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftControllerActions set) { return set.Get(); }
        public void AddCallbacks(ILeftControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftControllerActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(ILeftControllerActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(ILeftControllerActions instance)
        {
            if (m_Wrapper.m_LeftControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftControllerActions @LeftController => new LeftControllerActions(this);

    // RightController
    private readonly InputActionMap m_RightController;
    private List<IRightControllerActions> m_RightControllerActionsCallbackInterfaces = new List<IRightControllerActions>();
    private readonly InputAction m_RightController_Position;
    private readonly InputAction m_RightController_Rotation;
    public struct RightControllerActions
    {
        private @TrackedDeviceTransformInput m_Wrapper;
        public RightControllerActions(@TrackedDeviceTransformInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_RightController_Position;
        public InputAction @Rotation => m_Wrapper.m_RightController_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_RightController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightControllerActions set) { return set.Get(); }
        public void AddCallbacks(IRightControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_RightControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightControllerActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IRightControllerActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IRightControllerActions instance)
        {
            if (m_Wrapper.m_RightControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_RightControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightControllerActions @RightController => new RightControllerActions(this);

    // HMD
    private readonly InputActionMap m_HMD;
    private List<IHMDActions> m_HMDActionsCallbackInterfaces = new List<IHMDActions>();
    private readonly InputAction m_HMD_Position;
    private readonly InputAction m_HMD_Rotation;
    public struct HMDActions
    {
        private @TrackedDeviceTransformInput m_Wrapper;
        public HMDActions(@TrackedDeviceTransformInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_HMD_Position;
        public InputAction @Rotation => m_Wrapper.m_HMD_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_HMD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HMDActions set) { return set.Get(); }
        public void AddCallbacks(IHMDActions instance)
        {
            if (instance == null || m_Wrapper.m_HMDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HMDActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IHMDActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IHMDActions instance)
        {
            if (m_Wrapper.m_HMDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHMDActions instance)
        {
            foreach (var item in m_Wrapper.m_HMDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HMDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HMDActions @HMD => new HMDActions(this);
    private int m_TrackedDeviceInputSchemeSchemeIndex = -1;
    public InputControlScheme TrackedDeviceInputSchemeScheme
    {
        get
        {
            if (m_TrackedDeviceInputSchemeSchemeIndex == -1) m_TrackedDeviceInputSchemeSchemeIndex = asset.FindControlSchemeIndex("TrackedDeviceInputScheme");
            return asset.controlSchemes[m_TrackedDeviceInputSchemeSchemeIndex];
        }
    }
    public interface ILeftControllerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IRightControllerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IHMDActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
